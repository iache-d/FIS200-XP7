import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import find_peaks

tiempo = np.array(
    [
        0,
        0.1,
        0.2,
        0.3,
        0.4,
        0.5,
        0.6,
        0.7,
        0.8,
        0.9,
        1,
        1.1,
        1.2,
        1.3,
        1.4,
        1.5,
        1.6,
        1.7,
        1.8,
        1.9,
        2,
        2.1,
        2.2,
        2.3,
        2.4,
        2.5,
        2.6,
        2.7,
        2.8,
        2.9,
        3,
        3.1,
        3.2,
        3.3,
        3.4,
        3.5,
        3.6,
        3.7,
        3.8,
        3.9,
        4,
        4.1,
        4.2,
        4.3,
        4.4,
        4.5,
        4.6,
        4.7,
        4.8,
        4.9,
        5,
        5.1,
        5.2,
        5.3,
        5.4,
        5.5,
        5.6,
        5.7,
        5.8,
        5.9,
        6,
        6.1,
        6.2,
        6.3,
        6.4,
        6.5,
        6.6,
        6.7,
        6.8,
        6.9,
        7,
        7.1,
        7.2,
        7.3,
        7.4,
        7.5,
        7.6,
        7.7,
        7.8,
        7.9,
        8,
        8.1,
        8.2,
        8.3,
        8.4,
        8.5,
        8.6,
        8.7,
        8.8,
        8.9,
        9,
        9.1,
        9.2,
        9.3,
        9.4,
        9.5,
        9.6,
        9.7,
        9.8,
        9.9,
        10,
    ]
)
posicion = np.array(
    [
        -0.0118,
        0.0175,
        0.0577,
        0.0742,
        0.0537,
        0.0138,
        -0.0122,
        -0.0027,
        0.0344,
        0,
        0.0703,
        0.0384,
        -0.0002,
        -0.0128,
        0.0104,
        0.0501,
        0.0728,
        0.0599,
        0.0218,
        -0.0097,
        -0.0078,
        0.026,
        0.0631,
        0.0722,
        0.046,
        0.0068,
        -0.0127,
        0.0035,
        0.0423,
        0.0713,
        0.0656,
        0.03,
        -0.0051,
        -0.0104,
        0.0182,
        0.0564,
        0.0728,
        0.0532,
        0.0139,
        -0.012,
        -0.0026,
        0.0341,
        0.0671,
        0.0687,
        0.038,
        0.0008,
        -0.0119,
        0.0104,
        0.0497,
        0.0727,
        0.0597,
        0.0219,
        -0.0087,
        -0.0064,
        0.0261,
        0.062,
        0.0713,
        0.0459,
        0.007,
        -0.0126,
        0.0036,
        0.0419,
        0.0699,
        0.0643,
        0.0301,
        -0.004,
        -0.0097,
        0.018,
        0.0562,
        0.0724,
        0.0528,
        0.0143,
        -0.0106,
        -0.0014,
        0.0334,
        0.0662,
        0.0683,
        0.038,
        0.001,
        -0.0118,
        0.0107,
        0.0491,
        0.0712,
        0.0588,
        0.0223,
        -0.0076,
        -0.0061,
        0.0258,
        0.0615,
        0.0706,
        0.0456,
        0.0077,
        -0.0111,
        0.0045,
        0.0416,
        0.0691,
        0.0638,
        0.03,
        -0.0039,
        -0.0093,
        0.0183,
    ]
)

# Identificar los picos (máximos y mínimos) en los datos de la posición
picos, _ = find_peaks(posicion)

# Calcular los períodos usando los tiempos de los picos
# El período es la diferencia entre los tiempos de dos picos consecutivos
periodos = np.diff(tiempo[picos])

# Calcular el período promedio
T_promedio = np.mean(periodos)

# Calcular la desviación estándar del período
T_desviacion = np.std(periodos)

# Calcular la incertidumbre en omega_0
delta_T = T_desviacion
delta_omega_0 = (2 * np.pi / T_promedio**2) * delta_T
omega_0 = 2 * np.pi / T_promedio

print(f"Período promedio: {T_promedio:.4f} s")
print(f"Incertidumbre en el período: {T_desviacion:.4f} s")
print(f"Frecuencia angular natural omega_0: {omega_0:.4f} rad/s")
print(f"Incertidumbre en omega_0: {delta_omega_0:.4f} rad/s")

plt.figure(figsize=(10, 6))
plt.plot(tiempo, posicion, label="Posición vs Tiempo")
plt.plot(tiempo[picos], posicion[picos], "ro", label="Picos")
plt.xlabel("Tiempo (s)")
plt.ylabel("Posición (m)")
plt.title("Posición vs Tiempo con Picos Identificados")
plt.legend()
plt.grid(True)
plt.show()
